services:
  # Frontend - Nginx serving static files and proxying API
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile.compose
    ports:
      - "80:8080"  # Map host port 80 to container port 8080
    depends_on:
      - backend
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend - Node.js API (you'll need to create this)
  backend:
    build: ../backend  # Assuming backend is in parent/backend directory
    environment:
      - PORT=3000
      - MESSAGE=Hello from Full-Stack Docker App!
      - POSTGRES_HOST=database
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=myapp
      - REDIS_HOST=cache
      - REDIS_PORT=6379
    volumes:
      - app-data:/app/data
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_started
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database - PostgreSQL
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=myapp
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache - Redis
  cache:
    image: redis:7-alpine
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  app-data:
  postgres-data: 